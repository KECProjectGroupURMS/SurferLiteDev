//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace SurferLite.ServiceReferenceSurferliteAzureServer {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceSurferlite")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceSurferliteAzureServer.IServiceSurferlite")]
    public interface IServiceSurferlite {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/GetHrefLinks", ReplyAction="http://tempuri.org/IServiceSurferlite/GetHrefLinksResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetHrefLinksAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/GetData", ReplyAction="http://tempuri.org/IServiceSurferlite/GetDataResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetDataAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/ServiceDownloadTest", ReplyAction="http://tempuri.org/IServiceSurferlite/ServiceDownloadTestResponse")]
        System.Threading.Tasks.Task ServiceDownloadTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/GetHtml", ReplyAction="http://tempuri.org/IServiceSurferlite/GetHtmlResponse")]
        System.Threading.Tasks.Task<byte[]> GetHtmlAsync(System.Uri URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/getdatafromPack", ReplyAction="http://tempuri.org/IServiceSurferlite/getdatafromPackResponse")]
        System.Threading.Tasks.Task getdatafromPackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSurferlite/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceSurferlite/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SurferLite.ServiceReferenceSurferliteAzureServer.CompositeType> GetDataUsingDataContractAsync(SurferLite.ServiceReferenceSurferliteAzureServer.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSurferliteChannel : SurferLite.ServiceReferenceSurferliteAzureServer.IServiceSurferlite, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSurferliteClient : System.ServiceModel.ClientBase<SurferLite.ServiceReferenceSurferliteAzureServer.IServiceSurferlite>, SurferLite.ServiceReferenceSurferliteAzureServer.IServiceSurferlite {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceSurferliteClient() : 
                base(ServiceSurferliteClient.GetDefaultBinding(), ServiceSurferliteClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServiceSurferlite.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSurferliteClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceSurferliteClient.GetBindingForEndpoint(endpointConfiguration), ServiceSurferliteClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSurferliteClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceSurferliteClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSurferliteClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceSurferliteClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSurferliteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetHrefLinksAsync(string url) {
            return base.Channel.GetHrefLinksAsync(url);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetDataAsync(string url) {
            return base.Channel.GetDataAsync(url);
        }
        
        public System.Threading.Tasks.Task ServiceDownloadTestAsync() {
            return base.Channel.ServiceDownloadTestAsync();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetHtmlAsync(System.Uri URL) {
            return base.Channel.GetHtmlAsync(URL);
        }
        
        public System.Threading.Tasks.Task getdatafromPackAsync() {
            return base.Channel.getdatafromPackAsync();
        }
        
        public System.Threading.Tasks.Task<SurferLite.ServiceReferenceSurferliteAzureServer.CompositeType> GetDataUsingDataContractAsync(SurferLite.ServiceReferenceSurferliteAzureServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceSurferlite)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceSurferlite)) {
                return new System.ServiceModel.EndpointAddress("http://surferlitedev.cloudapp.net/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceSurferliteClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServiceSurferlite);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceSurferliteClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServiceSurferlite);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IServiceSurferlite,
        }
    }
}
